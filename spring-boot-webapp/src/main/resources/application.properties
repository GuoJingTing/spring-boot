# 使用 druid- 数据源
# https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE-filter
#spring.config.location=classpath:/application.properties,classpath:/ftp.properties
#不同的环境设置，使用不同的配置文件  spring.profiles.active
#application.properties 和 application-mysql.properties 只能在 resource 的根目录下
spring.profiles.active=mysql
# context-path , 设置以后需要修改 spring security 中的路径设置
# 发布为单独部署的 war ，部署到 tomcat 上时，server.context-path 和 server.port 两个设置不起作用，端口是部署端的 tomcat 的端口
# tomcat 的 jdk 版本应该和 war 保持一致，否则不能启动 spring boot 应用
server.servlet.context-path=/base
server.servlet.session.timeout=
server.port=8080

################### mvc ##########################
spring.mvc.throw-exception-if-no-handler-found=true
#出错时，显示原始信息，而不是 spring boot 的 whitelabel 页，whitelabel 页面提示信息过少
server.error.whitelabel.enabled=false
################### jpa ##########################
#功能：
# 1. 自动创建表
# 2. 自动导入根目录的 import.sql 数据 （hibernate 的特性 ，只有 spring.jpa.hibernate.ddl-auto=create-drop 才能自动导入）
# 3. 双数据源时，好像不能自动创建表
spring.jpa.show-sql=true
spring.jpa.open-in-view=true
#spring.jpa.hibernate.ddl-auto
#none:
#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构，以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。
#        增加的字段会自动增加，但是不会删除原来已有的字段。所以如果原来的字段不要了，需要手工删除
#validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
spring.jpa.hibernate.ddl-auto=update
################### freemarker ##########################
# 修改后，自动加载
# eclipse 下，保存修改即可自动 reload ，idea 下需要 build project ，所以此项在 idea 下是鸡肋
# spring-boot-devtools 插件也是一样
spring.freemarker.cache=false
# 注意不是 spring.freemarker.prefix
spring.freemarker.template-loader-path=classpath:/templates/
#spring.freemarker.prefix=
spring.freemarker.suffix=.ftl
spring.freemarker.encoding=UTF-8
# spring.freemarker.request-context-attribute : freemarker 页面中，通过它来获取当前应用的 context
# 相当于 org.springframework.web.servlet.support.RequestContext.class
# <#assign ctx = "${context.contextPath}">   点 . 相当于 RequestContext.class 类中的 get 方法
# 声明变量 ctx 后，可以直接使用 ${ctx}
spring.freemarker.request-context-attribute=context
# spring.resources.static-locations : 静态文件路径，会自动被 spring boot 转换为 web 应用的根目录下
# 通过 http://localhost/** 访问
# 放在 static/ace 目录下的 ace.css 文件，访问的 url 是 http://localhost/ace/ace.css
# 下面的为默认值
# Static resources reloading during development
spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/
spring.resources.cache-period=0
################### jackjson config ##########################
#可配置项： org.springframework.boot.autoconfigure.jackson.JacksonProperties.java
# prettyPrint : spring.jackson.serialization.indent_output=true
spring.jackson.serialization.indent_output=true
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
# Asia/Shanghai ，如果不写，默认为服务器时区
spring.jackson.time-zone=Asia/Shanghai

################### log config ##########################
spring.output.ansi.enabled=detect