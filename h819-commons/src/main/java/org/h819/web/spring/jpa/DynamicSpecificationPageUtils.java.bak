/**
 * ****************************************************************************
 * Copyright (c) 2005, 2014 springside.github.io
 * <p/>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * <p/>
 * 参考 springside 4 项目，改动并做了扩展
 * *****************************************************************************
 */
package org.h819.web.spring.jpa.dynamicsearch;

import com.google.common.collect.Lists;
import org.h819.commons.MyStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.util.Assert;

import javax.persistence.criteria.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;


/**
 * Description : TODO(创建动态查询语句 Specification ，有了 Specification 之后，可以利用 JPA 进行查询。Specification 就是各种查询条件集合)
 * Description : TODO(Specification ，实现其接口 toPredicate 方法即可 )
 * User: h819
 * Date: 2015-5-3
 * Time: 下午9:20
 * To change this template use File | Settings | File Templates.
 */

//另外一个参考的例子：http://www.baeldung.com/spring-rest-api-query-search-language-tutorial

public class DynamicSpecificationPageUtils<T> {

    //private static final Logger logger = LoggerFactory.getLogger(DynamicSpecificationPageUtils.class);


    /**
     * @param searchFilter 查询条件的集合
     *                     根据于查询对象的属性，构造 SearchFilter
     *                     如果属性 level 是一个字符串，构造为 SearchFilter searchFilter = new SearchFilter("level", SearchFilter.Operator.EQ, "1");
     *                     如果属性 user 是一个对象，构造为 searchFilters.add(new SearchFilter("user", SearchFilter.Operator.EQ, userEntity)); // userEntity 为一个对象
     * @return
     */

    //其他的比较，不知道怎么加进来，如 in 和 between 等，之后另外创建了几个方法。
    public static <T> Specification<T> bySearchFilter(final SearchFilter searchFilter) {

        return new Specification<T>() {
            /**
             *
             * @param root   查询中的条件表达式
             * @param query  条件查询设计器
             * @param builder 条件查询构造器
             * @return
             */
            @Override
            public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
                /**
                 *取得最终的属性名称
                 */
                Path fieldName = translateNestedPath(root, searchFilter);
//                logger.info("fieldName : " + fieldName.toString() + " , " + fieldName.getJavaType());
                //构造一个空查询
                Predicate predicate = builder.conjunction();
                // logic operator
                switch (searchFilter.operator) {

                    case EQ:
                        predicate = builder.equal(fieldName, searchFilter.value);
                        break;
                    case NE:
                        predicate = builder.notEqual(fieldName, searchFilter.value);
                        break;
                    case LIKE:
                        predicate = builder.like(fieldName, "%" + searchFilter.value + "%");
                        break;
                    case NLIKE:
                        predicate = builder.notLike(fieldName, "%" + searchFilter.value + "%");
                        break;
                    case GT:
                        predicate = builder.greaterThan(fieldName, (Comparable) searchFilter.value);
                        break;
                    case GTE:
                        predicate = builder.greaterThanOrEqualTo(fieldName, (Comparable) searchFilter.value);
                        break;
                    case LT:
                        predicate = builder.lessThan(fieldName, (Comparable) searchFilter.value);
                        break;
                    case LTE:
                        predicate = builder.lessThanOrEqualTo(fieldName, (Comparable) searchFilter.value);
                        break;
                    case NN:
                        predicate = builder.isNotNull(fieldName);
                        break;
                    //放在此处，操作不变，不能醒目的提示， SearchFilter 的 value 是集合
//                    case IN:
//                        Assert.isTrue(!searchFilter.fieldName.contains("."), "不能对级联属性进行 in 比较"); //强制检查是否是级联属性。
//                        Assert.isTrue(Collection.class.isAssignableFrom(searchFilter.value.getClass()), "searchFilter.value 不是集合，不能进行比较"); //强制检查是否是级联属性。
//                        Assert.isTrue(!((Collection) searchFilter.value).isEmpty(), "集合为空，不能进行 in 操作: 在集合中放入一个不会影响程序运行结果的元素，进行比较。或者通过逻辑判断，此 in 比较不参加条件组合。"); //强制检查是否是级联属性。
//                        predicate = root.get(searchFilter.fieldName).in(searchFilter.value);
//                        break;
//                    case NIN:
//                        Assert.isTrue(!searchFilter.fieldName.contains("."), "不能对级联属性进行 in 比较"); //强制检查是否是级联属性。
//                        Assert.isTrue(Collection.class.isAssignableFrom(searchFilter.value.getClass()), "searchFilter.value 不是集合，不能进行比较"); //强制检查是否是级联属性。
//                        Assert.isTrue(!((Collection) searchFilter.value).isEmpty(), "集合为空，不能进行 in 操作: 在集合中放入一个不会影响程序运行结果的元素，进行比较。或者通过逻辑判断，此 in 比较不参加条件组合。"); //强制检查是否是级联属性。
//                        predicate = root.get(searchFilter.fieldName).in(searchFilter.value).not();
//                        break;


                }
                return predicate;
            }
        };
    }

    /**
     * 构造单个属性的 IN 查询 ，相当于  @Query("select e from InfoEntity e where e.province in ?1")
     * 此时： attribute 为 "province" ,  values 为 e.province 对象的集合
     * 多个属性在不同集合中的 IN 查询，用 join 方法连接
     *
     * @param attribute 实体中的属性名称。对应上述列子，应是 InfoEntity 中的 province  属性。
     *                  如果集合为空，会抛出异常
     *                  处理办法是：在集合中放入一个不会影响程序运行结果的元素，进行比较。
     *                  例如集合元素是对象 id ，long 类型，则放入 -1 ，id 不会是负数，所以不会影响程序运行。
     *                  注意：
     *                  1. 不能是级联属性，只能比较实体中的直接属性，例如 province.website 就不行。
     *                  2. 如果遇到比较的是级联属性，则通过其他方法查询级联属性后再比较。如通过查询 website -> province ,之后还是直接比较 province
     * @param values    用于比较的对象集合。 对应上述列子，应该是 InfoEntity 中的 e.province 对象的集合
     * @param <T>
     * @return
     */

    //in 操作特殊，不放入 bySearchFilter 方法
    public static <T> Specification<T> byInOperator(final String attribute, final Collection<T> values) {

        Assert.isTrue(!values.isEmpty(), "集合为空，不能进行 in 操作: 在集合中放入一个不会影响程序运行结果的元素，进行比较。或者通过逻辑判断，此 in 比较不参加条件组合。"); //强制检查是否是级联属性。
        Assert.isTrue(!attribute.contains("."), "不能对级联属性进行 in 比较"); //强制检查是否是级联属性。

        return new Specification<T>() {
            /**
             *
             * @param root   查询中的条件表达式
             * @param query  条件查询设计器
             * @param builder 条件查询构造器
             * @return
             */
            @Override
            public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
                /**
                 * 属性进行 in 操作
                 */
                if (values != null && !values.isEmpty())
                    return root.get(attribute).in((values));
                return builder.conjunction(); //返回没有条件的查询结构，相当于所有的记录
            }
        };
    }

    /**
     * 不在集合中
     *
     * @param values
     * @param attribute
     * @param <T>
     * @return
     */
    public static <T> Specification<T> byNotInOperator(final String attribute, final Collection<?> values) {

        //利用了 jpa 中 条件相反的方法
        return byNotSpecification((Specification<T>) byInOperator(attribute, values));

    }

    /**
     * 构造 between 查询，包含 start , end
     *
     * @param attribute
     * @param start
     * @param end
     * @param <T>
     * @return
     */
    //Between 操作特殊，不放入 bySearchFilter 方法
    public static <T> Specification<T> byBetweenOperator(final String attribute, final Object start, final Object end) {

        //构造查询条件
        return joinSpecification(
                SearchFilter.Relation.AND,
                bySearchFilter(new SearchFilter(attribute, SearchFilter.Operator.GTE, start)),
                bySearchFilter(new SearchFilter(attribute, SearchFilter.Operator.LTE, end))
        );
    }

    /**
     * 查询条件的相反条件
     *
     * @param specs 查询条件
     * @param <T>
     * @return
     */
    public static <T> Specification<T> byNotSpecification(Specification<T> specs) {
        return Specifications.not(specs);

    }

    /**
     * 多个 Specification 组合
     *
     * @param specifications
     * @param relation       条件之间的关系，只能有一种 , SearchFilter.Relation.AND 或者 SearchFilter.Relation.OR。可以两个两个组合，这样就可以设置多样的关联关系
     * @param <T>
     * @return
     */
    public static <T> Specification<T> joinSpecification(final SearchFilter.Relation relation, final Specification... specifications) {

        Assert.isTrue(relation.equals(SearchFilter.Relation.AND) || relation.equals(SearchFilter.Relation.OR), "relation must be \"AND | OR  \"");

//        Specifications<T> nullSpecification = Specifications.where(null);  // 此种方法不行，返回的结果包含所有结果
//        for (Specification specification : specifications) {
//            if (relation.equals(SearchFilter.Relation.AND))
//                nullSpecification.and(specification);
//            else nullSpecification.or(specification);
//
//
//        }
//        return nullSpecification;
        return new Specification<T>() {
            @Override
            public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
                List<Predicate> predicates = new ArrayList<Predicate>();
                //组装 Predicate
                for (Specification specification : specifications) {
                    predicates.add(specification.toPredicate(root, query, builder));
                }

                // 将所有条件用联合起来
                if (!predicates.isEmpty()) {

                    if (relation.equals(SearchFilter.Relation.OR))
                        return builder.or(predicates.toArray(new Predicate[predicates.size()]));
                    else
                        return builder.and(predicates.toArray(new Predicate[predicates.size()]));
                }

                return builder.conjunction();
            }
        };
    }

    /**
     * 同上，集合参数形式
     *
     * @param specifications
     * @param relation
     * @param <T>
     * @return
     */
    public static <T> Specification<T> joinSpecification(final SearchFilter.Relation relation, final Collection<Specification> specifications) {
        return joinSpecification(relation, specifications.toArray(new Specification[specifications.size()]));
    }


    /**
     * 多个 SearchFilter 创建 Specification
     *
     * @param relation
     * @param searchFilters
     * @param <T>
     * @return
     */
    public static <T> Specification<T> joinSearchFilter(final SearchFilter.Relation relation, final SearchFilter... searchFilters) {

        Collection<Specification> specifications = Lists.newArrayList();
        for (SearchFilter filter : searchFilters)
            specifications.add(bySearchFilter(filter));

        return joinSpecification(relation, specifications);
    }


    /**
     * 多个 SearchFilter 创建 Specification
     *
     * @param relation
     * @param searchFilters
     * @param <T>
     * @return
     */
    public static <T> Specification<T> joinSearchFilter(final SearchFilter.Relation relation, final Collection<SearchFilter> searchFilters) {

        return joinSearchFilter(relation, searchFilters.toArray(new SearchFilter[searchFilters.size()]));
    }

    /**
     * 构造一个空条件 Specification，但不能用来和其他 Specification 进行拼接，拼接的结果还是null。
     *
     * @param <T>
     * @return
     */
    public static <T> Specification<T> getNullSpecification() {
        return Specifications.where(null);
    }

    /**
     * 创建分页请求.
     *
     * @param currentPageNo  当前页码，第一页为 0
     * @param pageSize       每页记录数
     * @param directionField 排序字段
     * @param direction      排序关键字，应为 DESC、ASC，可以为 null ，此时按默认排序，即 DESC
     * @return
     */
    public static PageRequest createPageRequest(int currentPageNo, int pageSize, String directionField, Sort.Direction direction) {

        Assert.isTrue(direction.equals(Sort.Direction.DESC) || direction.equals(Sort.Direction.ASC), "sortType must be \"Sort.Direction.DESC  or Sort.Direction.ASC \"");
        Assert.hasText(directionField, "fieldName must not be null or empty!");
        return new PageRequest(currentPageNo, pageSize, new Sort(direction, directionField));
    }

    /**
     * 创建分页请求，默认的排序.
     *
     * @param currentPageNo 当前页码，第一页为 0
     * @param pageSize      每页记录数
     * @return
     */
    public static PageRequest createPageRequest(int currentPageNo, int pageSize) {
        return new PageRequest(currentPageNo, pageSize);
    }

    /**
     * 创建分页请求，默认的排序.
     *
     * @param currentPageNo 当前页码，第一页为 0
     * @param pageSize      每页记录数
     * @param sort          排序
     * @return
     */
    public static PageRequest createPageRequest(int currentPageNo, int pageSize, Sort sort) {
        return new PageRequest(currentPageNo, pageSize, sort);
    }


    /**
     * 根据 filter ，取得最终的属性名称。
     *
     * @param root
     * @param filter
     * @return
     */
    private static <T> Path<T> translateNestedPath(Root<T> root, SearchFilter filter) {
        /**
         *取得最终的属性名称
         */
        // 如属性名称为 "user.name", 则转换为 name
        String[] names = MyStringUtils.split(filter.fieldName, ".");
        //获得属性名
        Path fieldName = root.get(names[0]);
        //如果是多个逗点分开(task.user.name), 取最后一个属性名称
        for (int i = 1; i < names.length; i++) {
            fieldName = fieldName.get(names[i]);
        }
//        logger.info("fieldName : " + fieldName.toString() + " , " + fieldName.getJavaType());
        return fieldName;
    }

}
